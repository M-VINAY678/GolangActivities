// Code generated by MockGen. DO NOT EDIT.
// Source: paymentProcessor.go
//
// Generated by this command:
//
//	mockgen -source=paymentProcessor.go -destination=paymentProcessor_test.go -package=mockgen
//

// Package mockgen is a generated GoMock package.
package mockgen

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPaymentProcessor is a mock of PaymentProcessor interface.
type MockPaymentProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentProcessorMockRecorder
	isgomock struct{}
}

// MockPaymentProcessorMockRecorder is the mock recorder for MockPaymentProcessor.
type MockPaymentProcessorMockRecorder struct {
	mock *MockPaymentProcessor
}

// NewMockPaymentProcessor creates a new mock instance.
func NewMockPaymentProcessor(ctrl *gomock.Controller) *MockPaymentProcessor {
	mock := &MockPaymentProcessor{ctrl: ctrl}
	mock.recorder = &MockPaymentProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentProcessor) EXPECT() *MockPaymentProcessorMockRecorder {
	return m.recorder
}

// Charge mocks base method.
func (m *MockPaymentProcessor) Charge(amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Charge", amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Charge indicates an expected call of Charge.
func (mr *MockPaymentProcessorMockRecorder) Charge(amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Charge", reflect.TypeOf((*MockPaymentProcessor)(nil).Charge), amount)
}
